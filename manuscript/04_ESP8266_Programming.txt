# ESP8266 Programming Basics

In this chapter we will have a look at the building blocks of an Arduino sketch. This will help you to understand and modify
the WeatherStation which we will build in the next chapter. If you just want to get the WeatherStation running you can skip this
chapter.

## Preparation

In this chapter we will work with exercises which you can download from GitHub. They contain several Arduino projects for the
ESP8266. For an exercise open the related project in your Arduino IDE and try to solve the given task. If you get stuck or want
to see an alternative solution open the project which ends with "_Solution":

 * `Exercise_04_01`: contains the first exercise in chapter 4
 * `Exercise_04_01_Solution`: contains a possible solution

Now download the Zip file from GitHub and extract it in a place you will find it later. There is a green "Clone or download"
button which lets you download a Zip file:

<https://github.com/squix78/esp8266-getting-started>

## The Arduino Sketch

The Arduino platform was built with the beginner in mind. Compared to a normal C program the Arduino IDE hides a few things
from you to simplify the setup. First of all you do not have to create a makefile to build your code into an executable binary.
The Arduino IDE also includes a default header file for you: `#include "Arduino.h"`. This contains all definitions needed for a
regular Arduino program.

Another important change compared to a regular C/C++ program are the two default functions `setup()` and `loop()`. The first
will be only called once during startup, while the `loop()` method will be called repeatedly. On a normal Arduino hardware
(ATmega chip) you can theoretically write code and never leave the `loop()` method again. The ESP8266 is a bit different here.
If your operations run for too much time a so-called *watchdog* will reset the ESP8266. You can prevent this by allowing the
controller to do important operations while you are still in the main loop. Calling `yield()` or `delay(ms)` will do this.

## Hello World: The serial console

Every self-respecting programming tutorial starts with a "Hello World" program. And I don't want to break with this tradition
here. A Hello-World program usually does no more than printing these two words somewhere on the screen. But we are programming
a microcontroller which does not have a screen yet. So where can we display the text? We will use the Serial object to do that.
While you are developing a program on the ESP8266, the microcontroller is connected to the computer that the Arduino IDE is running
on. We use this connection to write a new binary onto the flash memory of the ESP8266. And while our program is running we can
also use it to write messages from the ESP8266 back to our computer.

Using the Serial object is fairly easy. You have to initialize it first:

{lang="cpp"}
    Serial.begin(115200);

This tells the Serial object that you want to communicate with a baud rate of `115200`. Remember to set the same transfer rate
later in the serial console on your computer. Both partners in the communication need to have the same speed settings or you will
just see garbage. If you want to send a message from your program to your computer you just do this:

{lang="cpp"}
    Serial.print("Hello ");
    Serial.println("World");

Please have a look at the little difference between the first and the second line. The first uses a method called `print()` and
the second `println()`. The only difference is that the latter adds a line break to the output.

X> ## Exercise 04.01: Hello world!
X>
X> Now it is time to write our first program. Open the project `Exercise_04_01` in your Arduino IDE and fill in the required
X> code to print "1. Hello World", "2. Hello World" etc. Remember that you only need to initialize the Serial object once, while
X> you'll have to print "<number>. Hello world" as long as the code runs.
X>
X> Once you are happy with your solution upload the sketch to your Arduino by clicking
X>
X> ![](images/UploadButton.png)
X>
X> If that was successful open the serial console by clicking on the magnifying glass:
X>
X> ![](images/SerialConsoleButton.png)
X>
X> Now your output should look something like this:
X>
X> ![](images/Excercise_04_01_SerialConsole.png)

If you want to learn more about the Serial object you can find more in the following link:

<https://arduino-esp8266.readthedocs.io/en/2.4.1/reference.html?highlight=serial#serial>

The exercise contains another important built-in function:

{lang="cpp"}
    delay(1000);

This instructs the processor to wait 1000 milliseconds (1 second) before continuing with the execution. As mentioned earlier
with this command it also gives the processor time to handle other tasks, such as receiving or sending network packets
over WiFi. In this context a call to `yield()` does the same as `delay(0)`.

## Input/Output: GPIO pins

Now that we can talk to our microcontroller over the serial line it is time to interact with the real world. Our ESP8266
is equipped with several so-called `General Purpose Input Output` or in short `GPIO` pins. They can be used for many different
applications such as sensing and generating digital signals of the 3.3 Volt range. This is important if you plan to use an external
component with your ESP8266: hardware designed for older Arduinos often uses the 5V (CMOS) range. Using such a device without
a logic level shifter might destroy your ESP8266.

Using a GPIO pin is quite easy: first you tell the microcontroller if you want to read or write from the pin. Then you do it.
Here is the code for reading:

{lang="cpp"}
      pinMode(PIN, INPUT);
      int state = digitalRead(PIN);

Unless you want to change the mode of a pin you only need to call `pinMode()` once. Please note that depending on the pin
you can also use `INPUT_PULLUP` or `INPUT_PULLDOWN`. Writing to a pin is not much different:

{lang="cpp"}
      pinMode(PIN, OUTPUT);
      digitalWrite(PIN, HIGH); // or
      digitalWrite(PIN, LOW);

The second statement will show a `HIGH` level on `PIN` which will be 3.3V. The third statement will set the pin to
`LOW` which is 0V.

What values for `PIN` can you use? If you are using a generic ESP8266 module (not a NodeMCU) your pins will be labeled
`GPIO0`, `GPIO1`, etc. To use pin GPIO0 you would write `digitalWrite(0, HIGH);`

If you are using a NodeMCU things get a little bit more complicated. The original creators of the NodeMCU Lua firmware and
the development module of the same name had the idea to give the pins different names. They are called `D0`, `D1`, etc.
That by itself would not be confusing yet but they are not using the same digits, e.g. `GPIO1` is not equal to `D1`. Here
is a table to map the pins:

| Raw Module Name | NodeMCU & Wemos Name |
|-----------------|----------------------|
| GPIO0           | D3                   |
| GPIO1           | D10                  |
| GPIO2           | D4                   |
| GPIO3           | D9                   |
| GPIO4           | D2                   |
| GPIO5           | D1                   |
| GPIO6           | N/A                  |
| GPIO7           | N/A                  |
| GPIO8           | N/A                  |
| GPIO9           | D11                  |
| GPIO10          | D12                  |
| GPIO11          | N/A                  |
| GPIO12          | D6                   |
| GPIO13          | D7                   |
| GPIO14          | D5                   |
| GPIO15          | D8                   |
| GPIO16          | D0                   |

![NodeMCU DevKit Pin Map <https://github.com/nodemcu/nodemcu-devkit-v1.0>](images/NODEMCU_DEVKIT_V1.0_PINMAP.png)

X> ## Exercise 04.02: Can't touch this!?
X>
X> In this exercise you are going to read from the button on your NodeMCU labelled with FLASH.
X> This button is connected to the `D3` pin. Put the `D3` pin to input mode in the `setup()` method
X> and read from the pin repeatedly in the `loop()` and write the results to the console.

X> ## Exercise 04.03: Led it shine!
X>
X> Let's control an LED! Your NodeMCU has one built in and it is connected to `D0`. Like in the previous
X> example set the pin to the correct mode and then toggle it once per second.

X> ## Exercise 04.04: Every breath you take! (Bonus for Experts)
X>
X> Pure blinking is boring. We want our little ESP8266 to live! Control the intensity of the LED and
X> make it look as if the ESP8266 was breathing. Note: if the LED was on another pin than `D0` we
X> would use pulse width modulation (PWM) and the `writeAnalog(PIN, INTENSITY)` method. But this feature
X> is not available on `D0` so you will have to do this in your code.

## Interrupts

Depending on your age you might remember interrupts from your PC. They were always important to get your sound card
to play beautiful music. The ESP8266 can also be controlled by interrupts. In the previous exercises we were checking
regularly for the state of a GPIO pin. This is fine if you are not doing anything else in the main loop. But you might
miss a change in a state if it is very short, and that is were the interrupts can help. With an interrupt handler
you can tell the processor that you are interested in a specific type of change and a given pin. This is how it works:

{lang="cpp"}
    void buttonPressed() {
      ...
    }

    void setup() {
        pinMode(PIN, INPUT);
        attachInterrupt(digitalPinToInterrupt(PIN), buttonPressed, CHANGE);
    }


`buttonPressed()` is a method without parameters that gets called when there is a change on `PIN`. Instead of `CHANGE` you can
also use `RISING` which triggers the callback when the pin changes from `LOW` to `HIGH`, or `FALLING` for a change in the
opposite direction. Please do not execute long tasks in the callback method. The ESP's watchdog will reset the processor
if calling the interrupt takes too much time. You should not do much more than changing a flag.

X> ## Exercise 04.05: I don't want to miss a thing!
X>
X> In this exercise we will setup an interrupt and turn an LED on and off with every press to the button. See what
X> happens when you use different interrupt modes like `RISING`, `FALLING` and `CHANGE`.

## Measuring analog signals

So far we can read and write the digital states `HIGH`and `LOW`, but what if we want to deal with analog signals? The
ESP has one Analog To Digital Converter (ADC) which can be used to measure voltage in the range 0 - 1V. To do that use
the following command:

{lang="cpp"}
    unsigned value = analogRead(A0);

You can also use the ADC to measure the input voltage without any additional wiring. You have to instruct
the processor that you want to measure the supply voltage rather than the value on `A0` with a special command outside
the `setup()` and `loop()` method. Here is an example:

{lang="cpp"}
    ADC_MODE(ADC_VCC);

    void setup() {
       Serial.begin(115200);
    }

    void loop() {
       Serial.println(ESP.getVcc());
       delay(500);
    }

## WiFi

The last few chapters were all about built-in functions of the Arduino/ESP8266 platform. Now we will start using libraries
which are part of the platform and are already installed. So how can we use the WiFi module of the ESP8266? First of all
you need to know that the ESP8266 can operate as a WiFi client (like a smartphone or laptop) and/or as an access point (like a WiFi router or extender). You can set this mode with:

{lang="cpp"}
    WiFi.mode(m);

where `m` must be one of the following modes: `WIFI_AP` (access point), `WIFI_STA` (client), `WIFI_AP_STA` (AP and client)
or `WIFI_OFF`.

Now let's connect to your access point:

{lang="cpp"}
    WiFi.begin(WIFI_SSID, WIFI_PWD);

This will connect you to an access point given its `SSID` and the password. Please note that this call is not blocking.
This means that the code will immediately proceed to the next instruction whether the ESP successfully connects to the access point
or not.

## HTTP

By connecting to the internet you can exchange data between your ESP8266 and the network. Let's look at how
we can load content from a web server using the Hyper Text Transfer Protocol (HTTP). This protocol is the foundation of
the World Wide Web.

{lang="cpp"}
    #include <ESP8266WiFi.h>

    const char* ssid     = "SSID";
    const char* password = "PASSW0RD";

    const char* host = "www.squix.org";

    void setup() {
      Serial.begin(115200);

      Serial.print("Connecting to ");
      Serial.println(ssid);

      WiFi.begin(ssid, password);

      // Wait until WiFi is connected
      while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
      }

      Serial.println("");
      Serial.println("WiFi connected");
      Serial.println("IP address: ");
      Serial.println(WiFi.localIP());
    }

    void loop() {
      delay(5000);

      Serial.print("connecting to ");
      Serial.println(host);

      // Use WiFiClient class to create TCP connections
      WiFiClient client;
      const int httpPort = 80;
      if (!client.connect(host, httpPort)) {
        Serial.println("connection failed");
        return;
      }

      // We now create a URI for the request
      String url = "/guide/";

      Serial.print("Requesting URL: ");
      Serial.println(url);

      // This will send the request to the server
      client.print(String("GET ") + url + " HTTP/1.1\r\n" +
                   "Host: " + host + "\r\n" +
                   "Connection: close\r\n\r\n");

      unsigned long timeout = millis();
      while (client.available() == 0) {
        if (millis() - timeout > 5000) {
          Serial.println(">>> Client Timeout !");
          client.stop();
          return;
        }
      }

      // Read all the lines of the reply from server and print them to Serial
      while(client.available()){
        String line = client.readStringUntil('\r');
        Serial.print(line);
      }

    }

How does this work? First we define the SSID and password of the WiFi access point we want to connect to. Please note
that there are better ways to do that. The WiFiManager (<https://github.com/tzapu/WiFiManager>) for instance starts
the ESP8266 as an access point if it cannot connect to any SSID. You then use your smartphone to configure the WiFi credentials
and there is no need to hard code these into your firmware. But for the sake of simplicity let's ignore this here.

On *line 14* we start connecting to the defined access point and wait until the connection is established. After all
there is no point to send requests to a server if the network connection is not confirmed yet.

*Line 49* sends the request to the server. The command `GET /guide/ HTTP/1.1\r\n` might look strange to you. This is how
your browser talks to the web server. `GET` is the command for the webserver, `/guide/` is the resource on the server
we want to get and `HTTP/1.1` is the protocol that we are using. If you are interested how this works in detail have a look
at this Wikipedia article: <https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol>.

On *line 63* we print out the response line by line as long as there is text coming in.

Sadly this is quite complicated. Especially if we want to add encryption in the form of SSL to the connection.
This protects your data and makes sure that you are talking to the right server. With the following command we can verify
that the host matches the given SHA1 fingerprint.

{lang="cpp"}
    if (client.verify(fingerprint, host)) {
      Serial.println("certificate matches");
    } else {
      Serial.println("certificate doesn't match");
      return;
    }

How can you find this fingerprint? Your browser can help you with this. I will show it with Chrome. First open the page
you need the fingerprint for, in my case `www.google.ch`. Then click on the little lock symbol and then on `Details`:

![](images/ChromeCertificate.png)

A click on `View Certificate` will bring up the detail window about Google's certificate:

![](images/ChromeFingerprint.png)

Scroll down to the bottom of the window and copy the value behind `SHA1`. This is the fingerprint to verify that you are
actually talking to `www.google.ch`.


X> ## Exercise 04.06: Better safe than sorry!
X>
X> In this exercise we will start with the same program as I included earlier in this chapter. But now you are going to change
X> the code to receive the search site from google on a secure channel. Complete the following tasks:
X>
X> 1. Change the host from `www.squix.org` to `www.google.ch`
X> 2. Get the SHA1 fingerprint for `www.google.ch`
X> 3. Add a check that this fingerprint matches `www.google.ch`
