# Using External Components

In the last chapter we learned how to use the ESP8266's core hardware. By connecting external components to our micro controller we can do a lot more than that! In the first part of this chapter we connect the OLED display and learn how to program it. In the second part we use the DHT sensor to measure humidity and temperature.

## Preparation

Please make sure that you have downloaded the exercises from the last chapter since we will continue to use them here. In addition we will have to install two libraries: one for the display and one for the DHT sensor.

I> **Libraries**: If you are new to programming you might ask what libraries are. When we develop programs we use libraries to not have to invent the wheel over and over again. Libraries contain functionality that might be used in different places without creating copies of code which is hard to maintain. So for you libraries are a wonderful thing: you can concentrate on the things that really matter to you. In the case of the WeatherStation they provide a lot of functionality which normally would take you a lot of time to write yourself.

Go to `Sketch > Include Library… > Manage Libraries…` and install the following library. Make sure that you always have the latest version of the libraries installed. Users have reported many issues which could be reduced by simply updating the library. Also make sure that you only have one version of each of the libraries installed.

![SSD1306 OLED Library](images/SSD1306OledLibrary.png)

## Connecting the Display

The WeatherStation Kit comes with an OLED display that has four connectors: `VCC`, `GND`, `SCL` and `SDA`. They have the following meaning:

* `VCC` and `GND` are the power supply of the display. `VCC` is the positive supply voltage and `GND` stands for “ground”. They will be connected to `3V3` and `GND` on the NodeMCU board
* `SCL` and `SDA` are the data lines of the I2C protocol. `SCL` stands for Serial Clock and `SDA` for Serial Data.

In the following diagram I used a breadboard and male-to-male jumpers to connect the components. But you can also connect them directly with four (colored) female-to-female jumpers. They come with the WeatherStation Kit. Just peel the first four wires off of the bundle and connect them according to the picture. The colors do not matter.

![Wiring the Weather Station](images/Wiring.png)

Please note: there are versions of the OLED display with swapped `GND` and `VCC` pins. Be careful to connect them according to the printed labels, not (necessarily) this diagram!

| NodeMCU Pin | OLED Display Pin |
|-------------|------------------|
| 3V3         | VCC              |
| GND         | GND              |
| D3          | SDA              |
| D4          | SCL              |

As mentioned earlier, there exists a little confusion about the pin names. The Arduino IDE uses the GPIO number given by the chip. The NodeMCU team who designed the board changed the pin naming for their Lua firmware. If you are programming a NodeMCU module you can use the printed `D#` names. If you use a generic ESP8266 module then you have to use the corresponding GPIO numbers. Here is a table of the mapping:

| NodeMCU Index | ESP8266 Internal | NodeMCU Index | ESP8266 Internal | 
|---------------|------------------|---------------|------------------|
| D0            | GPIO16           | D7            | GPIO13           |
| D1            | GPIO5            | D8            | GPIO5            |
| D2            | GPIO4            | D9            | GPIO3            |
| D3            | GPIO0            | D10           | GPIO1            |
| D4            | GPIO2            | D11           | GPIO9            |
| D5            | GPIO14           | D12           | GPIO10           |
| D6            | GPIO12           |               |                  |

The NodeMCU Index is the name on the board, whereas the ESP8266 Internal column
is the one you use in the Arduino IDE code: e.g. `D5` on the board is pin `GPIO14` in C/C++.

## Displays, Drivers and Protocols

I> **Displays and Pixels**: The smallest unit of a display is called a pixel. It is usually a single dot that - depending of the capabilities of the display - can have two or more colors. A pixel on our OLED display can only have one of two states: it is either on (white) or off (black). The geometry of a display is described by the number of pixels it has in the horizontal and the vertical dimension. The OLED display has 128 horizontal pixels and 64 vertical pixels which gives us 128 * 64 = 8192 distinct pixels. Display libraries help you to address these pixels. Instead of setting single pixels you can draw objects such as text, lines or circles.

In the micro controller world there are several ways to communicate with a display. These contracts between external hardware and the micro controller are called protocols and small displays usually either use I²C (Inter-Integrated Circuit, pronounced `I-squared-C`) or SPI (Serial Peripheral Interface). The protocols define how many physical lines are used for the communication, how many devices can participate, how data is represented and how fast the data can be transmitted.

Our OLED display exposes a I²C interface (often written as I2C). There are also modules available that have both I2C and SPI or just SPI. These protocols define low-level communication. On top of that there is a hardware specific protocol which defines how functions of the hardware can be used, e.g. turning a pixel on or off. Manufacturers usually publish so called data sheets which describe in detail the available functions and how to use them. You can have a look at the data sheet of our display chip. But be warned, it's very technical! <https://cdn-shop.adafruit.com/datasheets/SSD1306.pdf>

To make sure that you don't have to read these data sheets people and companies develop drivers which simplify the usage of the external hardware. To set a single pixel by only using the I2C protocol you'd have to send several commands. This makes the development of higher level applications complicated and error prone. When I first started programming the ESP8266 there was no driver for the SSD1306 0.96" OLED display so I sat down and ported the driver from another micro controller to the ESP8266 architecture.

## Driver Initialization

Before we can draw to the display we need to lay the ground work for the driver. First of all we need to initialize the display driver with three values: the address on the I2C bus, and the two pins we are going to use for communication. Since we are going to re-use the driver in different places of our sketch we are going to declare it globally. This means that driver variable is visible to both the setup() and the loop() function.

{lang="cpp"}
    SSD1306Wire display(0x3c, D3, D4);

`Wire` is another name for the I2C protocol and `SSD1306` is the name of the chip driving the display. `0x3c` is the address the display listens to the I2C bus. In theory we could attach many different devices to the bus. A device only responds if its address is used during the communication. Very much like an email that only arrives in your inbox if your email address is used. `D3` is used to transmit the data (SDA) whereas `D4` is the GPIO pin how the micro controller tells all devices listening on the bus that the next piece of information is ready. This signal is called `clock` and the communication line SCL.

Next we are going to initialize the display driver. This usually only needs to be done once and belongs thus into the `setup()` function of your sketch:

{lang="cpp"}
    display.init();

This display driver first creates an image in the micro controller's internal memory. Once the whole display is defined this image is written as one to the display. This technique is called a frame buffer and avoids flickering on the display. The downside of this approach is that frame buffers use your micro controller's scarce working memory. However this display is so small that the frame buffer only uses 1KB of memory.

## Basic Drawing Operations

A normal drawing cycle consists of clearing the frame buffer, executing one or several drawing operations and then writing the frame buffer to the display:

{lang="cpp"}
    display.clear();
    display.setColor(WHITE);
    display.drawLine(0, 0, 10, 10);
    display.display();

Depending on whether you want to do this just once or repeatedly this goes into the `setup()` or the `loop()` method. In this example I used a method to draw a line. It is defined as follows:

{lang="cpp"}
    void drawLine(x1, y1, x2, y2);

The x1/y1 coordinates define the starting point of the line and x2/y2 define the end. The origin of this coordinate system is the top left corner. This is quite usual if you have ever worked with any graphical programming. If you are used to algebraic graphs then you might expect the y axis to direct up rather than down.

![The SSD1306 driver's coordinate system](images/SSD1306Coordinates.jpg)

X> ## Exercise 05.01: X marks the spot!
X>
X> Now you should have all the information you need to draw your first objects to the display. Open the sketch in the
X> folder `Exercise_05_01` and draw two lines. The first from top left to bottom right, the second from bottom left to top
X> right so that the form a white cross which spans the whole display.

X> ## Exercise 05.02: Animate!
X>
X> Great, you drew your first object onto the screen! Now let's animate the objects. Instead of using fix values for the
X> line coordinates we can also use variables. Use a variable `y` to move the start and end points up and down. Remember
X> that operations you want to execute repeatedly need to be in the `loop()` method.

## Hello World

The title of this chapter is "Hello World" so let's write this text to the display. Writing text is almost as easy as drawing lines. The following method declaration shows you how to do it:

{lang="cpp"}
    void drawString(int16_t x, int16_t y, String text);

The parameters `x` and `y` define the position from where the text will be drawn. This is the top left corner of the box surrounding the text. Now our graphics driver does not now which font type to use for drawing the text. We can do this with the `setFont(..)` method. Here is an example:

{lang="cpp"}
    display.setFont(ArialMT_Plain_10);

The SSD1306 library comes with 3 built-in fonts: ArialMT_Plain_10, ArialMT_Plain_16 and ArialMT_Plain_24. They are defined in the file `OLEDDisplayFonts.h` which is included by default for you.

X> ## Exercise 05.03: Hello World!
X>
X> Write the text "Hello World" to the OLED display. When you have this working go on and extend this exercise by adding a
X> counter to display "Hello World 1", "Hello World 2", etc.

The fonts we use here are bitmap fonts. Unlike the vector fonts you usually use in MS Word and other text processing applications these bitmap fonts have a fixed appearance (size, weight, etc). If you need another size you have to generate a font file and include it's proprietary format in your sketch. I created a web tool that lets you do that with as little effort as possible. On the site <http://oleddisplay.squix.ch/> and choose a font you would like to use in the sketch. There is even a preview that helps you to pick the right font and size. After you click the `Create` button you need to copy the results into a new tab in the Arduino IDE.

X> ## Exercise 05.04: More Fonts, Please!
X>
X> Use the tool at <http://oleddisplay.squix.ch/> and create a file for the Font Rancho, 16pt, bold. Add a new tab to our
X> Arduino sketch and name it Rancho_Regular_16.h. Copy the created font into this tab and save the file. In the main
X> sketch add #include "Rancho_Regular_16.h" and use the new font by calling `display.setFont(Rancho_Regular_16);`. Finally
X> write "Crunchy Rancho" to the display. * Please Note:* if you get a compile error `invalid conversion from 'const char*' to 'const uint8_t*` then please change the third line in "Rancho_regular_16.h" from 'const char Rancho_Regular_16' to 'const uint8_t Rancho_Regular_16'

## More Drawing Methods

So far we have seen the methods to draw lines and to print text to the display. But the SSD130 library has more to offer. But where can you find out about the other methods? Probably the easiest way is the source code of the library which is currently hosted at github: <https://github.com/ThingPulse/esp8266-oled-ssd1306/blob/master/src/OLEDDisplay.h>. This is the header file which describes the available method of the OLEDDisplay class. Here are some interesting examples:

{lang="cpp"}
    // Draw the border of a circle
    void drawCircle(int16_t x, int16_t y, int16_t radius);

    // Fill circle
    void fillCircle(int16_t x, int16_t y, int16_t radius);

With these two methods you can draw a hollow or filled circle. There is also another type of methods in this class to control aspects of the display:

{lang="cpp"}
    // Turn the display on
    void displayOn(void);

    // Turn the display offs
    void displayOff(void);

    // Turn the display upside down
    void flipScreenVertically();

    // Mirror the display (to be used in a mirror or as a projector)
    void mirrorScreen();

X> ## Exercise 05.05: Read the Manual
X>
X> This exercise is all about helping yourself. The goal is to write text on the screen that automatically wraps to
X> the next line when a line fills the width of the screen. Further all lines should be aligned at the center of the
X> screen. We did not discuss the necessary methods here, but with a bit of digging you find everything you need to know
X> here: <https://github.com/ThingPulse/esp8266-oled-ssd1306/blob/master/src/OLEDDisplay.h>

## The DHT Sensor

The ESP8266 WeatherStation comes with a temperature and humidity sensor called `DHT11`. The little breakout board has two additional components so that you only have to use three wires to connect the sensor to your ESP8266. The sensor uses a proprietary protocol for communication with the micro controller. If you want to find out more about the sensor or the protocol you can have a look at this data sheet: <https://www.mouser.com/ds/2/758/DHT11-Technical-Data-Sheet-Translated-Version-1143054.pdf>. The DHT11 or its more precise sibling the DHT22 are quite popular in the Arduino world due to their good price and easy usage. Let's have a look now how we can use it.

## Wiring the Sensor

The following diagram shows you how to connect the sensor to the NodeMCU module. You can leave the display connected, we will use it again at the end of this chapter.

| NodeMCU Pin | DHT Pin          |
|-------------|------------------|
| 3V3         | VCC              |
| GND         | GND              |
| D6          | DAT              |

![DHT11 Wiring](images/DHT11Wiring.png)

## Installing the Libraries

Now we need to install the library for the DHT sensor. You can choose from several options but for these exercises we are going to take DHT library from Bernd Giesecke (beegee-tokyo). Go to `Sketch > Include Library… > Manage Libraries…` and install this library:

![ESP DHT Library](images/DHTLib.png)


## Using the Sensor

Using the library is easy. We need to include a few header files and initialize the driver. The first parameter

{lang="cpp"}
    #include "DHTesp.h"

    DHTesp dht;

In the setup method we have to define the pin we use and the sensor type. In case you use a DHT22 sensor change the second paramter accordingly:

{lang="cpp"}
    dht.setup(D6, DHTesp::DHT11);

Now reading temperature and humidity is a piece of cake:

{lang="cpp"}
    float humidity = dht.getHumidity();
    float temperature = dht.getTemperature();

X> ## Exercise 05.06: The Heat is On!
X>
X> In this exercise you'll put the pieces together to read temperature and humidity from the DHT11 sensor. Include the
X> correct header file, declare the sensor driver before the `setup()` method, tell the driver which pin and sensor type
X> you are using in the `setup()` method. Finally read humidity and temperature and write the values to the serial console.
